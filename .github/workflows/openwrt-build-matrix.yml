name: OpenWrt Release MAIN

permissions:
  contents: write

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * 0'

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: main
  TZ: Europe/Berlin

jobs:
  prep:
    runs-on: ubuntu-24.04
    outputs:
      commit_sha: ${{ steps.set-sha.outputs.sha }}
    steps:
      - name: Checkout OpenWrt
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: ${{ env.REPO_BRANCH }}

      - name: Set commit SHA output
        id: set-sha
        run: echo "::set-output name=sha::$(git rev-parse HEAD)"

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential clang flex bison g++ gawk gettext git libncurses-dev libssl-dev python3-venv rsync unzip zlib1g-dev file wget ccache

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Copy seed config
        run: cp ${{ github.workspace }}/.config_WAN .config

      - name: Build tools and toolchain seed
        run: |
          make defconfig
          make tools/install -j$(nproc) V=s
          make toolchain/install -j$(nproc) V=s

      - name: Package seed toolchain cache
        run: tar czf toolchain-cache.tar.gz staging_dir tools

      - name: Upload toolchain cache artifact
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-toolchain-cache-${{ steps.set-sha.outputs.sha }}
          path: toolchain-cache.tar.gz

  build:
    needs: prep
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - OpenWRTDevice: Flint2_gl-mt6000
            CONFIG_FILE: .config
          - OpenWRTDevice: Flint2_gl-mt6000
            CONFIG_FILE: .config_WAN

    env:
      OpenWRTDevice: ${{ matrix.OpenWRTDevice }}
      CONFIG_FILE: ${{ matrix.CONFIG_FILE }}

    steps:
      - name: Checkout OpenWrt
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: ${{ env.REPO_BRANCH }}

      - name: Download toolchain cache artifact
        uses: actions/download-artifact@v4
        with:
          name: openwrt-toolchain-cache-${{ needs.prep.outputs.commit_sha }}
          path: .

      - name: Extract toolchain cache
        run: tar xzf toolchain-cache.tar.gz

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential clang flex bison g++ gawk gettext git libncurses-dev libssl-dev python3-venv rsync unzip zlib1g-dev file wget ccache

      - name: Cache downloads and staging_dir
        uses: actions/cache@v4
        with:
          path: |
            dl
            staging_dir
            .ccache
          key: ${{ runner.os }}-openwrt-dl-staging-${{ matrix.CONFIG_FILE }}-${{ hashFiles(matrix.CONFIG_FILE) }}

      - name: Load config
        run: cp ${{ github.workspace }}/$CONFIG_FILE openwrt/.config

      - name: Build OpenWrt
        run: |
          cd openwrt
          export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
          ccache -M 2G
          make defconfig
          make download V=s
          make -j$(($(nproc)+1)) V=s

      - name: Organize firmware files
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "NOW=$(date +%F-%H%M)" >> $GITHUB_ENV

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.CONFIG_FILE }}-${{ env.NOW }}
          path: ${{ env.FIRMWARE }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all firmware artifacts
        uses: actions/download-artifact@v4
        with:
          path: firmware-artifacts

      - name: Create Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          title: OpenWrt Build ${{ github.run_number }} ${{ github.ref_name }}
          files: firmware-artifacts/**/*
